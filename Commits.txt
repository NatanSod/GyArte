0 - Made trail and fixed layers (see commits.txt 0)
Added the commit file. This file is to write more about the changes and additions in each commit, because I have a tendency to get off track and then do something else. This will allow me to write all the information I want. New text will be added to the end of this file in the future.

Made the trail class. It is used to create a trail behind the leading party member for the trailing party members to follow. The class has also been made able to fulfill that purpose. In the future I might make a modified version that I use to make trails for the NPCs to follow while they go about their day, but that is a low priority.

Found the reason for the wacky framerate issues that happen at regular intervals even though, currently, each frame should be remarkably similar. I was wondering if I should use Raylib to unload the texture2Ds and RenderTexture2Ds that I use for the layer effect, because Raylib seems to also be for C++ and they usually need to do that manually. Well, now I have my answer, I very much need to unload them.

Not really an update but I decided to test if the GameMaster delegates that return an Actor actually allowed them to be collected by garbage collection like I hoped. I found that the very act of calling the delegate, and that alone, made it unable to be picked up by garbage collection, even if the delegate itself is forgotten. I'm going to try simply ignoring it until that no longer becomes possible.


1 - Fix Trail direction and vector to int
I gave the Player class a function to turn a vector into an integer that represents a direction. Here, I even made a chart.
7   8   9
  \ | /
4 - 5 - 6   (It's based on the configuration of the number-pad on most keyboards)
  / | \
1   2   3
In the future, this will be used to get the correct sprite from a class with an index of sprites. Speaking of which, I might want to start working on that.
While doing that I also noticed that the Trail classes GetDirectionAt didn't actually work, so I had to fix it.
Also. I forgot to mention that a number will be included in the commit message which relates to the section of this file that includes more information.


2 - Made SpriteSheet, changed vector to int
I made the sprite sheet class and a bunch of functionality from it. It should be done. When loading an image (in png format, always) it needs a complimentary json file that describes metadata. 
I realised I don't need a value for lack of direction because that should never happen, and I don't want to make 8 different animations for walking (5 if I mirror them), so I'm just going to make 4 (3 if I mirror them) and change the vector to int to match that.
3   4   1
  \ | /
3 - X - 1  (Based on a clock, with the highest number on the top)
  / | \
3   2   1
The reason there are three 1s and 3s each4 is because I want it to favour the sprites of horizontal movement, though I might change that if it looks bad.


3 - Player uses SpriteSheet
Player can now use SpriteSheet, though it doesn't really use animations yet. I mentioned in the commit where I added the test image and it's metadata that it was probably broken. Surprisingly enough, it was not.


4 - Messed up test sheet
Scratch that previous one, I accidentally made the sprite for standing while looking left instead point to the right. How did I miss that?

5 - Replace GameMaster with Hivemind 
Create Mastermind, Slave, and Hive. The main difference between Hivemind and GameMaster is that Hivemind won't be future proofed. It will be what I need and nothing more, because I spend way too much time thinking about "Oh, what if I want to do ___?" and doing something I might never need.
As a first step to say "I don't care about the future, now is what's important!" I changed each Vector3 to a Vector2.

Mastermind: takes care of the update loop, organises the loaded sprite-sheets, and in general has an administrative role. It handles all inputs except for those that go to player because I don't feel like making that work right now. Maybe later.
Slave: is the class for NPCs and props in the world, they have the same set of data as the player except they may also have a name, they have a bool for weather or not it's solid, and they may have an Interaction. 
Hive: is the class for rooms, it handles all the Slaves in it and collisions. Though currently, the Hive is only able to handle slaves, and collisions don't work. 

The player has been made able to interact with a Slave. How interaction is initiated depends on if the Slave is solid or not. A solid Slave requires that the user presses space while it's collision box overlaps with the interaction box created in front of the player (the direction it went in last). A non solid Slave requires that the player position falls within it's collision box for even a frame.

There are a lot of classes with a name that start with "Meta". These are all for the purpose of constructing the class it's named after, usually by every get and set being public allowing a json object to be loaded into them.

The "Image" directory had it's name changed to "Sprites" and was moved to the new "Assets directory ". All data used by the game that isn't defined through code is saved in there, such as the hives (rooms) and tile-sets.

The files have a naming scheme to identify them at a glance. All sprit-sheets start with "S_", all hives start with "H_", and all tile-sets starts with "T_" (when I finally make one). When giving the name of what to load, these identifiers should not be included, as the loading function will include it automatically.
Speaking of tile-sets, I made the TileSet class. It's currently very bare bones, but in the future it's meant to be a way to handle, you guessed it, tile-sets.

I also made a change to the Trail class. Instead of using delegates to access the time and current position of the trailblazer (what I call the thing making the trail) I made the ITrailblazer interface to be implemented by any trailblazer.


6 - Updated CLine and related
CLine has been changed to be able to accept a special target parameter (used by specific commands to identify what should be effected by it) and the argument split pattern has been changed to not separate string values and equations into separate items. The equation part does however slightly break negative values, so I will have to deal with that somehow. Could just make no commands that expect a negative value, or do 0 - [value]. 
CommandManager has also been turned into an abstract class, because I refuse to make any code for TalkBox that only works in this project, and the command manager needs to handle commands specific for this project.
I also changed a bit of how Runner interacts with these two to make them fit together better.
The class that shall inherit CommandManager is Puppeteer. It currently has the bare minimum to avoid the IDE complaining or causing a compile error.


7 - Stealing
Decided to steal a bunch of code from Yarn Spinner. It can be found at, https://github.com/YarnSpinnerTool, and most code is from these two directories: https://github.com/YarnSpinnerTool/YarnSpinner and https://github.com/YarnSpinnerTool/YarnSpinner-Unity. It's all in Command.cs. 
However, I did not finnish integrating the stolen code because it is too much and I don't need it at the moment. I will therefore do that when I have time and need to.
I did however change how line information is sent from DialogueRunner to DialogueHandler. Before, DH asked DR for the next line and received it if available. Now, DR is asked to continue and then it tells DH what to do.
I also probably did a whole lot of other things, because I got very sidetracked throughout.